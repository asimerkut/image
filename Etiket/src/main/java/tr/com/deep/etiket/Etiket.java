/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tr.com.deep.etiket;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import org.apache.commons.io.IOUtils;
import tr.com.deep.etiket.actions.EditAction;
import tr.com.deep.etiket.actions.SelectAction;

/**
 *
 * @author ersin
 */
public class Etiket extends javax.swing.JFrame {

    EtiketModel etiketModel = new EtiketModel();

    DefaultListModel listModel = null;

    /**
     * Creates new form Etiket
     */
    public Etiket() {
        initComponents();
        
       this.imageEditor.setAction(new SelectAction(imageEditor));
       this.imageEditor.setFocusable(true);
       
       
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        imageList = new javax.swing.JList<>();
        jToolBar1 = new javax.swing.JToolBar();
        btnSelect = new javax.swing.JToggleButton();
        btnEdit = new javax.swing.JToggleButton();
        btnZoomIn = new javax.swing.JToggleButton();
        btnZoomOut = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        imageEditor = new tr.com.deep.etiket.ImageEditor();
        statusBar = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        importMenuItem = new javax.swing.JMenuItem();
        exportMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        imageList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = new String[0];
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        imageList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                imageListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(imageList);

        jToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar1.setRollover(true);

        buttonGroup1.add(btnSelect);
        btnSelect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/select.png"))); // NOI18N
        btnSelect.setSelected(true);
        btnSelect.setFocusable(false);
        btnSelect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSelect.setPreferredSize(new java.awt.Dimension(48, 48));
        btnSelect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSelect);

        buttonGroup1.add(btnEdit);
        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/move.png"))); // NOI18N
        btnEdit.setFocusable(false);
        btnEdit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEdit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEdit);

        buttonGroup1.add(btnZoomIn);
        btnZoomIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/zoom-in.png"))); // NOI18N
        btnZoomIn.setFocusable(false);
        btnZoomIn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnZoomIn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomInActionPerformed(evt);
            }
        });
        jToolBar1.add(btnZoomIn);

        buttonGroup1.add(btnZoomOut);
        btnZoomOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/zoom-out.png"))); // NOI18N
        btnZoomOut.setFocusable(false);
        btnZoomOut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnZoomOut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomOutActionPerformed(evt);
            }
        });
        jToolBar1.add(btnZoomOut);

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(imageEditor);

        statusBar.setBackground(new java.awt.Color(255, 255, 255));
        statusBar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        statusBar.setOpaque(true);

        fileMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/file.png"))); // NOI18N
        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/open-folder.png"))); // NOI18N
        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open Dir");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save.png"))); // NOI18N
        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        importMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/import.png"))); // NOI18N
        importMenuItem.setMnemonic('a');
        importMenuItem.setText("Import");
        importMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(importMenuItem);

        exportMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/export-icon.png"))); // NOI18N
        exportMenuItem.setText("Export");
        exportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportMenuItem);

        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/exit.png"))); // NOI18N
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/help.png"))); // NOI18N
        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        aboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/info.png"))); // NOI18N
        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1227, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1221, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(statusBar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Görüntü dizini");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.showOpenDialog(null);

        File dir = null;
        if ((dir = fileChooser.getSelectedFile()) != null) {

            etiketModel.setActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {

                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            statusBar.setText(String.valueOf( etiketModel.imageMetaList.length));
                        }
                    });

                }
            });
            etiketModel.setFolder(dir);

            changeListImages();
        }


    }//GEN-LAST:event_openMenuItemActionPerformed

    private void imageListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_imageListValueChanged

        try {

            //imageEditor.rectList.clear();
            // imageEditor.setIcon(new ImageIcon(etiketModel.imageMetaList[imageList.getSelectedIndex()].fileName));
            imageEditor.setImage(ImageIO.read(new File(etiketModel.imageMetaList[imageList.getSelectedIndex()].fileName)));
            imageEditor.setImageMeta(etiketModel.imageMetaList[imageList.getSelectedIndex()]);
            
            imageEditor.repaint();
        } catch (IOException ex) {
            Logger.getLogger(Etiket.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_imageListValueChanged

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed

        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        JFileChooser fc = new JFileChooser();
        fc.showSaveDialog(null);
        File f = fc.getSelectedFile();
        if (f != null) {

            PrintWriter pw;
            try {
                pw = new PrintWriter(f, "UTF-8");
                pw.write(gson.toJson(etiketModel.imageMetaList));
                pw.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Etiket.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(Etiket.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void importMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importMenuItemActionPerformed
        Gson gson = new GsonBuilder().create();
        JFileChooser fc = new JFileChooser();
        fc.showOpenDialog(null);
        File f = fc.getSelectedFile();
        if (f != null) {

            FileReader fr;
            try {
                fr = new FileReader(f);
                etiketModel.setImageMetaList(gson.fromJson(fr, ImageMeta[].class));
                fr.close();

                listModel = new DefaultListModel();

                for (ImageMeta im : etiketModel.getImageMetaList()) {
                    im.setMiniImage(EtiketModel.resize(ImageIO.read(new File(im.fileName)), im.dimension.width, im.dimension.height));

                    ImageIcon ii = new ImageIcon(im.getMiniImage());
                    listModel.addElement(ii);
                }

                imageList.setModel(listModel);
                imageList.repaint();

            } catch (FileNotFoundException ex) {
                Logger.getLogger(Etiket.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Etiket.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_importMenuItemActionPerformed

    private void exportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportMenuItemActionPerformed

        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.showSaveDialog(null);

        File f = fc.getSelectedFile();
        if (f != null) {

            for (ImageMeta im : etiketModel.imageMetaList) {

                if (!im.rectList.isEmpty()) {

                    copyImage(im, f);
                    
                    try {
                         
                        File inFile = new File(im.fileName);
                        PrintWriter pw = new PrintWriter(new File(f, inFile.getName().replaceAll("\\..+", "\\.txt")));
                        
                        for(ClassRect cr:im.rectList){
                            pw.printf("%s %f %f %f %f\r\n", cr.classEnum.name(),cr.getMinX(),cr.getMinY(),cr.getMaxX(),cr.getMaxY());
                        }
                        pw.close();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(Etiket.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }

        }


    }//GEN-LAST:event_exportMenuItemActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        imageEditor.setAction(new SelectAction(imageEditor));
    }//GEN-LAST:event_btnSelectActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
       this.imageEditor.setAction(new EditAction(imageEditor));
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomInActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnZoomInActionPerformed

    private void btnZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomOutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnZoomOutActionPerformed

    private void copyImage(ImageMeta im, File f) {
        File inFile = new File(im.getFileName());
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(new File(f, inFile.getName()));
            IOUtils.copy(new FileInputStream(inFile), fos);
            
            fos.flush();
            fos.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Etiket.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Etiket.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Etiket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Etiket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Etiket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Etiket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Etiket().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JToggleButton btnEdit;
    private javax.swing.JToggleButton btnSelect;
    private javax.swing.JToggleButton btnZoomIn;
    private javax.swing.JToggleButton btnZoomOut;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem exportMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private tr.com.deep.etiket.ImageEditor imageEditor;
    private javax.swing.JList<String> imageList;
    private javax.swing.JMenuItem importMenuItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JLabel statusBar;
    // End of variables declaration//GEN-END:variables

    private void changeListImages() {
        listModel = new DefaultListModel();

        for (ImageMeta im : etiketModel.loadFromDirectory()) {
            ImageIcon ii = new ImageIcon(im.getMiniImage());
            listModel.addElement(ii);
        }

        imageList.setModel(listModel);
    }

}
